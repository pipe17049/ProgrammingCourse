services:
  # Redis for distributed task queue and worker registry
  redis:
    image: redis:7-alpine
    container_name: image_processing_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - image_processing_network

  # Django API server
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api.final
    container_name: image_processing_api
    ports:
      - "8000:8000"
    volumes:
      - ./static:/app/static
      - ./logs:/app/logs
    environment:
      - DEBUG=False
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ALLOWED_HOSTS=localhost,127.0.0.1,api
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - image_processing_network
    restart: unless-stopped

  # Worker 1 - Specializes in I/O-bound tasks
  worker-1:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker.final
    container_name: image_processing_worker_1
    volumes:
      - ./static:/app/static
      - ./logs:/app/logs
    environment:
      - WORKER_ID=worker-1
      - WORKER_NAME=IO-Specialist
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - WORKER_CAPABILITIES=all  # ðŸŽ¯ DEMO: All filters for auto-scaling demo
      - WORKER_TYPE=io_bound
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - image_processing_network
    restart: unless-stopped

  # Worker 2 - Specializes in CPU-bound tasks  
  worker-2:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker.final
    container_name: image_processing_worker_2
    volumes:
      - ./static:/app/static
      - ./logs:/app/logs
    environment:
      - WORKER_ID=worker-2
      - WORKER_NAME=CPU-Specialist
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - WORKER_CAPABILITIES=all  # ðŸŽ¯ DEMO: All filters for auto-scaling demo
      - WORKER_TYPE=cpu_bound
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - image_processing_network
    restart: unless-stopped

  # Worker 3 - General purpose worker
  worker-3:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker.final
    container_name: image_processing_worker_3
    volumes:
      - ./static:/app/static
      - ./logs:/app/logs
    environment:
      - WORKER_ID=worker-3
      - WORKER_NAME=General-Purpose
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - WORKER_CAPABILITIES=all
      - WORKER_TYPE=general
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - image_processing_network
    restart: unless-stopped

  # Load balancer for multiple API instances (optional for advanced scaling)
  load-balancer:
    image: nginx:alpine
    container_name: image_processing_lb
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api
    networks:
      - image_processing_network
    restart: unless-stopped
    profiles:
      - load-balancer  # Only start with: docker-compose --profile load-balancer up

  # Monitoring with Redis Insight (optional)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: redis_insight
    ports:
      - "8001:8001"
    environment:
      - RITRUSTEDORIGINS=http://localhost:8001
    networks:
      - image_processing_network
    profiles:
      - monitoring  # Only start with: docker-compose --profile monitoring up

volumes:
  redis_data:
    driver: local

networks:
  image_processing_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16