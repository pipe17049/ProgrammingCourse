services:
  # Django Producer Service (REST API que se conecta a websocket-service)
  producer-and-server:
    build: ../my_first_docker_project
    ports:
      - "8000:8000"
    environment:
      - MONGO_DB=my_first_ci_db
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - MONGO_USERNAME=admin
      - MONGO_PASSWORD=password
      - DEBUG=1
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
      - WEBSOCKET_ENABLED=true  # Enable WebSocket notifications
      - WEBSOCKET_URL=ws://websocket-service:8765
    depends_on:
      - mongo
      - websocket-service
    networks:
      - microservices-network

  # Standalone WebSocket Service
  websocket-service:
    build: ./websocket-service
    ports:
      - "8765:8765"
    networks:
      - microservices-network
    restart: unless-stopped

  # Consumer Client
  consumer:
    build: ../my_first_consumer
    environment:
      - WEBSOCKET_URL=ws://websocket-service:8765
      - API_URL=http://producer:8000/api
    depends_on:
      - websocket-service
    networks:
      - microservices-network
    stdin_open: true
    tty: true

  # MongoDB Database
  mongo:
    image: mongo:7.0
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: my_first_ci_db
    volumes:
      - mongo_data:/data/db
      - ../my_first_docker_project/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - microservices-network


networks:
  microservices-network:
    driver: bridge

volumes:
  mongo_data: 